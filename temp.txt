nLinesH1 = int((self.__width - width - 2 * offset) / (width + gap))
        nLinesV1 = int((self.__height - height - 2 * offset) / (height + gap))
        nLinesH2 = int((self.__width - width - 2 * offset) / (height + gap))
        nLinesV2 = int((self.__height - height - 2 * offset) / (width+ gap))

        if ((nLinesH1 * nLinesV1) < (nLinesH2 * nLinesV2)):
            tempWidth = height
            tempHeight = width
            nLinesH = nLinesH2
            nLinesV = nLinesV2
        else:
            tempWidth = width
            tempHeight = height
            nLinesH = nLinesH1
            nLinesV = nLinesV1

        print("nLinesH: ", nLinesH)
        print("nLinesV: ", nLinesV)

        self.__printRect(0, 0, self.__width, self.__height)
        
        totalWidth = (nLinesH + 1) * tempWidth + nLinesH * gap + 2 * offset
        totalHeight = (nLinesV + 1) * tempHeight + nLinesV * gap + 2 * offset

        print("totalWidth: ", totalWidth)
        print("totalHeight: ", totalHeight)

        orgX = int((self.__width - totalWidth) / 2) + offset
        orgY = int((self.__height - totalHeight) / 2) + offset

        print("orgX: ", orgX)
        print("orgY: ", orgY)
        print("-------------------------")

        tempPen = QPen(Qt.GlobalColor.red)
        self.__printLine(0, 0, 0, 300, tempPen)

        off = 0
        self.__penLine.setWidth(gap)

        for i in range(nLinesH + 2):
            off = i * (tempWidth + gap)
            self.__printLine(orgX + off, orgY, orgX + off, totalHeight - offset )
            print("x1: ", orgX + off, " | y1: ", orgY, " | x2: ",orgX + off, " | y2: ", totalHeight - offset)
            print("-------------------------")

        self.__canvas.setScene(self.__scene) 





def __printRect(self, x1: int, y1: int, x2: int, y2: int, pen: QPen = None, brush: QBrush = None) -> None:
        
        assert(x1 >= 0 and x2 <= self.__width and y1 >= 0 and y2 <= self.__height)

        offset  = int(GEOMETRY_BORDER_SIZE + CANVAS_OFFSET / 2)

        geometry = QGraphicsRectItem( offset + x1, offset + y1, x2, y2)
        geometry.setPen(pen or self.__penGeometry)
        geometry.setBrush(brush or self.__brushGeometry)
        self.__scene.addItem(geometry)